/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CaffeService_H
#define CaffeService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "caffe_server_types.h"

namespace caffeserver {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CaffeServiceIf {
 public:
  virtual ~CaffeServiceIf() {}
  virtual void modelPredict(returnType& _return, const int32_t clientid, const std::string& picName) = 0;
};

class CaffeServiceIfFactory {
 public:
  typedef CaffeServiceIf Handler;

  virtual ~CaffeServiceIfFactory() {}

  virtual CaffeServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CaffeServiceIf* /* handler */) = 0;
};

class CaffeServiceIfSingletonFactory : virtual public CaffeServiceIfFactory {
 public:
  CaffeServiceIfSingletonFactory(const boost::shared_ptr<CaffeServiceIf>& iface) : iface_(iface) {}
  virtual ~CaffeServiceIfSingletonFactory() {}

  virtual CaffeServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CaffeServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CaffeServiceIf> iface_;
};

class CaffeServiceNull : virtual public CaffeServiceIf {
 public:
  virtual ~CaffeServiceNull() {}
  void modelPredict(returnType& /* _return */, const int32_t /* clientid */, const std::string& /* picName */) {
    return;
  }
};

typedef struct _CaffeService_modelPredict_args__isset {
  _CaffeService_modelPredict_args__isset() : clientid(false), picName(false) {}
  bool clientid :1;
  bool picName :1;
} _CaffeService_modelPredict_args__isset;

class CaffeService_modelPredict_args {
 public:

  CaffeService_modelPredict_args(const CaffeService_modelPredict_args&);
  CaffeService_modelPredict_args& operator=(const CaffeService_modelPredict_args&);
  CaffeService_modelPredict_args() : clientid(0), picName() {
  }

  virtual ~CaffeService_modelPredict_args() throw();
  int32_t clientid;
  std::string picName;

  _CaffeService_modelPredict_args__isset __isset;

  void __set_clientid(const int32_t val);

  void __set_picName(const std::string& val);

  bool operator == (const CaffeService_modelPredict_args & rhs) const
  {
    if (!(clientid == rhs.clientid))
      return false;
    if (!(picName == rhs.picName))
      return false;
    return true;
  }
  bool operator != (const CaffeService_modelPredict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CaffeService_modelPredict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CaffeService_modelPredict_pargs {
 public:


  virtual ~CaffeService_modelPredict_pargs() throw();
  const int32_t* clientid;
  const std::string* picName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CaffeService_modelPredict_result__isset {
  _CaffeService_modelPredict_result__isset() : success(false) {}
  bool success :1;
} _CaffeService_modelPredict_result__isset;

class CaffeService_modelPredict_result {
 public:

  CaffeService_modelPredict_result(const CaffeService_modelPredict_result&);
  CaffeService_modelPredict_result& operator=(const CaffeService_modelPredict_result&);
  CaffeService_modelPredict_result() {
  }

  virtual ~CaffeService_modelPredict_result() throw();
  returnType success;

  _CaffeService_modelPredict_result__isset __isset;

  void __set_success(const returnType& val);

  bool operator == (const CaffeService_modelPredict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CaffeService_modelPredict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CaffeService_modelPredict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CaffeService_modelPredict_presult__isset {
  _CaffeService_modelPredict_presult__isset() : success(false) {}
  bool success :1;
} _CaffeService_modelPredict_presult__isset;

class CaffeService_modelPredict_presult {
 public:


  virtual ~CaffeService_modelPredict_presult() throw();
  returnType* success;

  _CaffeService_modelPredict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CaffeServiceClient : virtual public CaffeServiceIf {
 public:
  CaffeServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CaffeServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void modelPredict(returnType& _return, const int32_t clientid, const std::string& picName);
  void send_modelPredict(const int32_t clientid, const std::string& picName);
  void recv_modelPredict(returnType& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CaffeServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CaffeServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CaffeServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_modelPredict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CaffeServiceProcessor(boost::shared_ptr<CaffeServiceIf> iface) :
    iface_(iface) {
    processMap_["modelPredict"] = &CaffeServiceProcessor::process_modelPredict;
  }

  virtual ~CaffeServiceProcessor() {}
};

class CaffeServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CaffeServiceProcessorFactory(const ::boost::shared_ptr< CaffeServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CaffeServiceIfFactory > handlerFactory_;
};

class CaffeServiceMultiface : virtual public CaffeServiceIf {
 public:
  CaffeServiceMultiface(std::vector<boost::shared_ptr<CaffeServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CaffeServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CaffeServiceIf> > ifaces_;
  CaffeServiceMultiface() {}
  void add(boost::shared_ptr<CaffeServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void modelPredict(returnType& _return, const int32_t clientid, const std::string& picName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modelPredict(_return, clientid, picName);
    }
    ifaces_[i]->modelPredict(_return, clientid, picName);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CaffeServiceConcurrentClient : virtual public CaffeServiceIf {
 public:
  CaffeServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CaffeServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void modelPredict(returnType& _return, const int32_t clientid, const std::string& picName);
  int32_t send_modelPredict(const int32_t clientid, const std::string& picName);
  void recv_modelPredict(returnType& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
