/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MLOlineService_H
#define MLOlineService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "mlmodel_online_project_types.h"

namespace modelpro {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MLOlineServiceIf {
 public:
  virtual ~MLOlineServiceIf() {}
  virtual void getLabel(std::vector<int32_t> & _return, const std::string& modelName) = 0;
  virtual void modelPredict(returnType& _return, const std::string& strFeature) = 0;
};

class MLOlineServiceIfFactory {
 public:
  typedef MLOlineServiceIf Handler;

  virtual ~MLOlineServiceIfFactory() {}

  virtual MLOlineServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MLOlineServiceIf* /* handler */) = 0;
};

class MLOlineServiceIfSingletonFactory : virtual public MLOlineServiceIfFactory {
 public:
  MLOlineServiceIfSingletonFactory(const boost::shared_ptr<MLOlineServiceIf>& iface) : iface_(iface) {}
  virtual ~MLOlineServiceIfSingletonFactory() {}

  virtual MLOlineServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MLOlineServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MLOlineServiceIf> iface_;
};

class MLOlineServiceNull : virtual public MLOlineServiceIf {
 public:
  virtual ~MLOlineServiceNull() {}
  void getLabel(std::vector<int32_t> & /* _return */, const std::string& /* modelName */) {
    return;
  }
  void modelPredict(returnType& /* _return */, const std::string& /* strFeature */) {
    return;
  }
};

typedef struct _MLOlineService_getLabel_args__isset {
  _MLOlineService_getLabel_args__isset() : modelName(false) {}
  bool modelName :1;
} _MLOlineService_getLabel_args__isset;

class MLOlineService_getLabel_args {
 public:

  MLOlineService_getLabel_args(const MLOlineService_getLabel_args&);
  MLOlineService_getLabel_args& operator=(const MLOlineService_getLabel_args&);
  MLOlineService_getLabel_args() : modelName() {
  }

  virtual ~MLOlineService_getLabel_args() throw();
  std::string modelName;

  _MLOlineService_getLabel_args__isset __isset;

  void __set_modelName(const std::string& val);

  bool operator == (const MLOlineService_getLabel_args & rhs) const
  {
    if (!(modelName == rhs.modelName))
      return false;
    return true;
  }
  bool operator != (const MLOlineService_getLabel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLOlineService_getLabel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLOlineService_getLabel_pargs {
 public:


  virtual ~MLOlineService_getLabel_pargs() throw();
  const std::string* modelName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLOlineService_getLabel_result__isset {
  _MLOlineService_getLabel_result__isset() : success(false) {}
  bool success :1;
} _MLOlineService_getLabel_result__isset;

class MLOlineService_getLabel_result {
 public:

  MLOlineService_getLabel_result(const MLOlineService_getLabel_result&);
  MLOlineService_getLabel_result& operator=(const MLOlineService_getLabel_result&);
  MLOlineService_getLabel_result() {
  }

  virtual ~MLOlineService_getLabel_result() throw();
  std::vector<int32_t>  success;

  _MLOlineService_getLabel_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const MLOlineService_getLabel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MLOlineService_getLabel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLOlineService_getLabel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLOlineService_getLabel_presult__isset {
  _MLOlineService_getLabel_presult__isset() : success(false) {}
  bool success :1;
} _MLOlineService_getLabel_presult__isset;

class MLOlineService_getLabel_presult {
 public:


  virtual ~MLOlineService_getLabel_presult() throw();
  std::vector<int32_t> * success;

  _MLOlineService_getLabel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MLOlineService_modelPredict_args__isset {
  _MLOlineService_modelPredict_args__isset() : strFeature(false) {}
  bool strFeature :1;
} _MLOlineService_modelPredict_args__isset;

class MLOlineService_modelPredict_args {
 public:

  MLOlineService_modelPredict_args(const MLOlineService_modelPredict_args&);
  MLOlineService_modelPredict_args& operator=(const MLOlineService_modelPredict_args&);
  MLOlineService_modelPredict_args() : strFeature() {
  }

  virtual ~MLOlineService_modelPredict_args() throw();
  std::string strFeature;

  _MLOlineService_modelPredict_args__isset __isset;

  void __set_strFeature(const std::string& val);

  bool operator == (const MLOlineService_modelPredict_args & rhs) const
  {
    if (!(strFeature == rhs.strFeature))
      return false;
    return true;
  }
  bool operator != (const MLOlineService_modelPredict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLOlineService_modelPredict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLOlineService_modelPredict_pargs {
 public:


  virtual ~MLOlineService_modelPredict_pargs() throw();
  const std::string* strFeature;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLOlineService_modelPredict_result__isset {
  _MLOlineService_modelPredict_result__isset() : success(false) {}
  bool success :1;
} _MLOlineService_modelPredict_result__isset;

class MLOlineService_modelPredict_result {
 public:

  MLOlineService_modelPredict_result(const MLOlineService_modelPredict_result&);
  MLOlineService_modelPredict_result& operator=(const MLOlineService_modelPredict_result&);
  MLOlineService_modelPredict_result() {
  }

  virtual ~MLOlineService_modelPredict_result() throw();
  returnType success;

  _MLOlineService_modelPredict_result__isset __isset;

  void __set_success(const returnType& val);

  bool operator == (const MLOlineService_modelPredict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MLOlineService_modelPredict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLOlineService_modelPredict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLOlineService_modelPredict_presult__isset {
  _MLOlineService_modelPredict_presult__isset() : success(false) {}
  bool success :1;
} _MLOlineService_modelPredict_presult__isset;

class MLOlineService_modelPredict_presult {
 public:


  virtual ~MLOlineService_modelPredict_presult() throw();
  returnType* success;

  _MLOlineService_modelPredict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MLOlineServiceClient : virtual public MLOlineServiceIf {
 public:
  MLOlineServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MLOlineServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getLabel(std::vector<int32_t> & _return, const std::string& modelName);
  void send_getLabel(const std::string& modelName);
  void recv_getLabel(std::vector<int32_t> & _return);
  void modelPredict(returnType& _return, const std::string& strFeature);
  void send_modelPredict(const std::string& strFeature);
  void recv_modelPredict(returnType& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MLOlineServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MLOlineServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MLOlineServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getLabel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modelPredict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MLOlineServiceProcessor(boost::shared_ptr<MLOlineServiceIf> iface) :
    iface_(iface) {
    processMap_["getLabel"] = &MLOlineServiceProcessor::process_getLabel;
    processMap_["modelPredict"] = &MLOlineServiceProcessor::process_modelPredict;
  }

  virtual ~MLOlineServiceProcessor() {}
};

class MLOlineServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MLOlineServiceProcessorFactory(const ::boost::shared_ptr< MLOlineServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MLOlineServiceIfFactory > handlerFactory_;
};

class MLOlineServiceMultiface : virtual public MLOlineServiceIf {
 public:
  MLOlineServiceMultiface(std::vector<boost::shared_ptr<MLOlineServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MLOlineServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MLOlineServiceIf> > ifaces_;
  MLOlineServiceMultiface() {}
  void add(boost::shared_ptr<MLOlineServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getLabel(std::vector<int32_t> & _return, const std::string& modelName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLabel(_return, modelName);
    }
    ifaces_[i]->getLabel(_return, modelName);
    return;
  }

  void modelPredict(returnType& _return, const std::string& strFeature) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modelPredict(_return, strFeature);
    }
    ifaces_[i]->modelPredict(_return, strFeature);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MLOlineServiceConcurrentClient : virtual public MLOlineServiceIf {
 public:
  MLOlineServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MLOlineServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getLabel(std::vector<int32_t> & _return, const std::string& modelName);
  int32_t send_getLabel(const std::string& modelName);
  void recv_getLabel(std::vector<int32_t> & _return, const int32_t seqid);
  void modelPredict(returnType& _return, const std::string& strFeature);
  int32_t send_modelPredict(const std::string& strFeature);
  void recv_modelPredict(returnType& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
